{
    "sourceFile": "files/graph.hpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 74,
            "patches": [
                {
                    "date": 1704905345436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704905374014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,12 +24,8 @@\n \r\n void createGraph() {\r\n     graph = new (struct Graph);\r\n     graph -> adjList = (struct AdjList*) malloc(N_COUNT * sizeof(struct AdjList));\r\n-    \r\n-    for (int i = 0; i < N_COUNT; i) {\r\n-        graph -> adjList[i] = NULL;\r\n-    }\r\n }\r\n \r\n void drawEgde(int src, int dst) {\r\n     if(!graph) {\r\n"
                },
                {
                    "date": 1704905380679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+#include <iostream>\r\n+#include <queue>\r\n+using namespace std;\r\n+#define N_COUNT 4\r\n+\r\n+struct node {\r\n+    int src;\r\n+    int dest;\r\n+};\r\n+\r\n+struct AdjList {\r\n+    int src;\r\n+    queue<node*> dests;\r\n+};\r\n+\r\n+struct Graph {\r\n+    struct AdjList *adjList;\r\n+}*graph;\r\n+\r\n+void createGraph() {\r\n+    graph = new (struct Graph);\r\n+    graph -> adjList = (struct AdjList*) malloc(N_COUNT * sizeof(struct AdjList));\r\n+}\r\n+\r\n+void drawEgde(int src, int dst) {\r\n+    if(!graph) {\r\n+        cout << \"First create graph!\";\r\n+        return;\r\n+    }\r\n+\r\n+    for (int i = 0; i < N_COUNT; i++) {\r\n+        node *node = new (struct node);\r\n+        node -> dest = dst;\r\n+        graph -> adjList[i] -> src = src;\r\n+        graph -> adjList[i] -> dests.push(node);\r\n+    }\r\n+}\r\n+\r\n+void display() {\r\n+    if(!graph) {\r\n+        cout << \"First create graph!\";\r\n+        return;\r\n+    }\r\n+\r\n+    for (int i = 0; i < N_COUNT; i++) {\r\n+        cout << graph -> adjList[i] -> src << \" -> \" << graph -> adjList[i] -> dests.front() -> dest;\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704905391456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+#include <iostream>\r\n+#include <queue>\r\n+using namespace std;\r\n+#define N_COUNT 4\r\n+\r\n+struct node {\r\n+    int src;\r\n+    int dest;\r\n+};\r\n+\r\n+struct AdjList {\r\n+    int src;\r\n+    queue<node*> dests;\r\n+};\r\n+\r\n+struct Graph {\r\n+    struct AdjList *adjList;\r\n+}*graph;\r\n+\r\n+void createGraph() {\r\n+    graph = new (struct Graph);\r\n+    graph -> adjList = (struct AdjList*) malloc(N_COUNT * sizeof(struct AdjList));\r\n+}\r\n+\r\n+void drawEgde(int src, int dst) {\r\n+    if(!graph) {\r\n+        cout << \"First create graph!\";\r\n+        return;\r\n+    }\r\n+\r\n+    for (int i = 0; i < N_COUNT; i++) {\r\n+        node *node = new (struct node);\r\n+        node -> dest = dst;\r\n+        graph -> adjList[i]. -> src = src;\r\n+        graph -> adjList[i] -> dests.push(node);\r\n+    }\r\n+}\r\n+\r\n+void display() {\r\n+    if(!graph) {\r\n+        cout << \"First create graph!\";\r\n+        return;\r\n+    }\r\n+\r\n+    for (int i = 0; i < N_COUNT; i++) {\r\n+        cout << graph -> adjList[i] -> src << \" -> \" << graph -> adjList[i] -> dests.front() -> dest;\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704905401636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+#include <iostream>\r\n+#include <queue>\r\n+using namespace std;\r\n+#define N_COUNT 4\r\n+\r\n+struct node {\r\n+    int src;\r\n+    int dest;\r\n+};\r\n+\r\n+struct AdjList {\r\n+    int src;\r\n+    queue<node*> dests;\r\n+};\r\n+\r\n+struct Graph {\r\n+    struct AdjList *adjList;\r\n+}*graph;\r\n+\r\n+void createGraph() {\r\n+    graph = new (struct Graph);\r\n+    graph -> adjList = (struct AdjList*) malloc(N_COUNT * sizeof(struct AdjList));\r\n+}\r\n+\r\n+void drawEgde(int src, int dst) {\r\n+    if(!graph) {\r\n+        cout << \"First create graph!\";\r\n+        return;\r\n+    }\r\n+\r\n+    for (int i = 0; i < N_COUNT; i++) {\r\n+        node *node = new (struct node);\r\n+        node -> dest = dst;\r\n+        graph -> adjList[i].src = src;\r\n+        graph -> adjList[i] -> dests.push(node);\r\n+    }\r\n+}\r\n+\r\n+void display() {\r\n+    if(!graph) {\r\n+        cout << \"First create graph!\";\r\n+        return;\r\n+    }\r\n+\r\n+    for (int i = 0; i < N_COUNT; i++) {\r\n+        cout << graph -> adjList[i] -> src << \" -> \" << graph -> adjList[i] -> dests.front() -> dest;\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704905412057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+#include <iostream>\r\n+#include <queue>\r\n+using namespace std;\r\n+#define N_COUNT 4\r\n+\r\n+struct node {\r\n+    int src;\r\n+    int dest;\r\n+};\r\n+\r\n+struct AdjList {\r\n+    int src;\r\n+    queue<node*> dests;\r\n+};\r\n+\r\n+struct Graph {\r\n+    struct AdjList *adjList;\r\n+}*graph;\r\n+\r\n+void createGraph() {\r\n+    graph = new (struct Graph);\r\n+    graph -> adjList = (struct AdjList*) malloc(N_COUNT * sizeof(struct AdjList));\r\n+}\r\n+\r\n+void drawEgde(int src, int dst) {\r\n+    if(!graph) {\r\n+        cout << \"First create graph!\";\r\n+        return;\r\n+    }\r\n+\r\n+    for (int i = 0; i < N_COUNT; i++) {\r\n+        node *node = new (struct node);\r\n+        node -> dest = dst;\r\n+        graph -> adjList[i].src = src;\r\n+        graph -> adjList[i].dests.push(node);\r\n+    }\r\n+}\r\n+\r\n+void display() {\r\n+    if(!graph) {\r\n+        cout << \"First create graph!\";\r\n+        return;\r\n+    }\r\n+\r\n+    for (int i = 0; i < N_COUNT; i++) {\r\n+        cout << graph -> adjList[i].src << \" -> \" << graph -> adjList[i] -> dests.front() -> dest;\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704995663593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n \r\n void drawEgde(int src, int dst) {\r\n     if(!graph) {\r\n         cout << \"First create graph!\";\r\n+        list<>\r\n         return;\r\n     }\r\n \r\n     for (int i = 0; i < N_COUNT; i++) {\r\n@@ -42,204 +43,7 @@\n         return;\r\n     }\r\n \r\n     for (int i = 0; i < N_COUNT; i++) {\r\n-        cout << graph -> adjList[i].src << \" -> \" << graph -> adjList[i] -> dests.front() -> dest;\r\n+        cout << graph -> adjList[i].src << \" -> \" << graph -> adjList[i].dests.front() -> dest;\r\n     }\r\n-}\n-#include <iostream>\r\n-#include <queue>\r\n-using namespace std;\r\n-#define N_COUNT 4\r\n-\r\n-struct node {\r\n-    int src;\r\n-    int dest;\r\n-};\r\n-\r\n-struct AdjList {\r\n-    int src;\r\n-    queue<node*> dests;\r\n-};\r\n-\r\n-struct Graph {\r\n-    struct AdjList *adjList;\r\n-}*graph;\r\n-\r\n-void createGraph() {\r\n-    graph = new (struct Graph);\r\n-    graph -> adjList = (struct AdjList*) malloc(N_COUNT * sizeof(struct AdjList));\r\n-}\r\n-\r\n-void drawEgde(int src, int dst) {\r\n-    if(!graph) {\r\n-        cout << \"First create graph!\";\r\n-        return;\r\n-    }\r\n-\r\n-    for (int i = 0; i < N_COUNT; i++) {\r\n-        node *node = new (struct node);\r\n-        node -> dest = dst;\r\n-        graph -> adjList[i].src = src;\r\n-        graph -> adjList[i] -> dests.push(node);\r\n-    }\r\n-}\r\n-\r\n-void display() {\r\n-    if(!graph) {\r\n-        cout << \"First create graph!\";\r\n-        return;\r\n-    }\r\n-\r\n-    for (int i = 0; i < N_COUNT; i++) {\r\n-        cout << graph -> adjList[i] -> src << \" -> \" << graph -> adjList[i] -> dests.front() -> dest;\r\n-    }\r\n-}\n-#include <iostream>\r\n-#include <queue>\r\n-using namespace std;\r\n-#define N_COUNT 4\r\n-\r\n-struct node {\r\n-    int src;\r\n-    int dest;\r\n-};\r\n-\r\n-struct AdjList {\r\n-    int src;\r\n-    queue<node*> dests;\r\n-};\r\n-\r\n-struct Graph {\r\n-    struct AdjList *adjList;\r\n-}*graph;\r\n-\r\n-void createGraph() {\r\n-    graph = new (struct Graph);\r\n-    graph -> adjList = (struct AdjList*) malloc(N_COUNT * sizeof(struct AdjList));\r\n-}\r\n-\r\n-void drawEgde(int src, int dst) {\r\n-    if(!graph) {\r\n-        cout << \"First create graph!\";\r\n-        return;\r\n-    }\r\n-\r\n-    for (int i = 0; i < N_COUNT; i++) {\r\n-        node *node = new (struct node);\r\n-        node -> dest = dst;\r\n-        graph -> adjList[i]. -> src = src;\r\n-        graph -> adjList[i] -> dests.push(node);\r\n-    }\r\n-}\r\n-\r\n-void display() {\r\n-    if(!graph) {\r\n-        cout << \"First create graph!\";\r\n-        return;\r\n-    }\r\n-\r\n-    for (int i = 0; i < N_COUNT; i++) {\r\n-        cout << graph -> adjList[i] -> src << \" -> \" << graph -> adjList[i] -> dests.front() -> dest;\r\n-    }\r\n-}\n-#include <iostream>\r\n-#include <queue>\r\n-using namespace std;\r\n-#define N_COUNT 4\r\n-\r\n-struct node {\r\n-    int src;\r\n-    int dest;\r\n-};\r\n-\r\n-struct AdjList {\r\n-    int src;\r\n-    queue<node*> dests;\r\n-};\r\n-\r\n-struct Graph {\r\n-    struct AdjList *adjList;\r\n-}*graph;\r\n-\r\n-void createGraph() {\r\n-    graph = new (struct Graph);\r\n-    graph -> adjList = (struct AdjList*) malloc(N_COUNT * sizeof(struct AdjList));\r\n-}\r\n-\r\n-void drawEgde(int src, int dst) {\r\n-    if(!graph) {\r\n-        cout << \"First create graph!\";\r\n-        return;\r\n-    }\r\n-\r\n-    for (int i = 0; i < N_COUNT; i++) {\r\n-        node *node = new (struct node);\r\n-        node -> dest = dst;\r\n-        graph -> adjList[i] -> src = src;\r\n-        graph -> adjList[i] -> dests.push(node);\r\n-    }\r\n-}\r\n-\r\n-void display() {\r\n-    if(!graph) {\r\n-        cout << \"First create graph!\";\r\n-        return;\r\n-    }\r\n-\r\n-    for (int i = 0; i < N_COUNT; i++) {\r\n-        cout << graph -> adjList[i] -> src << \" -> \" << graph -> adjList[i] -> dests.front() -> dest;\r\n-    }\r\n-}\n-#include <iostream>\r\n-#include <queue>\r\n-using namespace std;\r\n-#define N_COUNT 4\r\n-\r\n-struct node {\r\n-    int src;\r\n-    int dest;\r\n-};\r\n-\r\n-struct AdjList {\r\n-    int src;\r\n-    queue<node*> dests;\r\n-};\r\n-\r\n-struct Graph {\r\n-    struct AdjList *adjList;\r\n-}*graph;\r\n-\r\n-struct Edge {\r\n-\tint src;\r\n-\tint dest;\r\n-};\r\n-\r\n-void createGraph() {\r\n-    graph = new (struct Graph);\r\n-    graph -> adjList = (struct AdjList*) malloc(N_COUNT * sizeof(struct AdjList));\r\n-}\r\n-\r\n-void drawEgde(int src, int dst) {\r\n-    if(!graph) {\r\n-        cout << \"First create graph!\";\r\n-        return;\r\n-    }\r\n-\r\n-    for (int i = 0; i < N_COUNT; i++) {\r\n-        node *node = new (struct node);\r\n-        node -> dest = dst;\r\n-        graph -> adjList[i] -> src = src;\r\n-        graph -> adjList[i] -> dests.push(node);\r\n-    }\r\n-}\r\n-\r\n-void display() {\r\n-    if(!graph) {\r\n-        cout << \"First create graph!\";\r\n-        return;\r\n-    }\r\n-\r\n-    for (int i = 0; i < N_COUNT; i++) {\r\n-        cout << graph -> adjList[i] -> src << \" -> \" << graph -> adjList[i] -> dests.front() -> dest;\r\n-    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704995669627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \r\n void drawEgde(int src, int dst) {\r\n     if(!graph) {\r\n         cout << \"First create graph!\";\r\n-        list<>\r\n+        list<int>::it\r\n         return;\r\n     }\r\n \r\n     for (int i = 0; i < N_COUNT; i++) {\r\n"
                },
                {
                    "date": 1704995705286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+#include <iostream>\r\n+#include <queue>\r\n+using namespace std;\r\n+#define N_COUNT 4\r\n+\r\n+struct node {\r\n+    int src;\r\n+    int dest;\r\n+};\r\n+\r\n+struct AdjList {\r\n+    int src;\r\n+    queue<node*> dests;\r\n+};\r\n+\r\n+struct Graph {\r\n+    struct AdjList *adjList;\r\n+}*graph;\r\n+\r\n+void createGraph() {\r\n+    graph = new (struct Graph);\r\n+    graph -> adjList = (struct AdjList*) malloc(N_COUNT * sizeof(struct AdjList));\r\n+}\r\n+\r\n+void drawEgde(int src, int dst) {\r\n+    if(!graph) {\r\n+        cout << \"First create graph!\";\r\n+        return;\r\n+    }\r\n+\r\n+    for (int i = 0; i < N_COUNT; i++) {\r\n+        node *node = new (struct node);\r\n+        node -> dest = dst;\r\n+        graph -> adjList[i].src = src;\r\n+        graph -> adjList[i].dests.push(node);\r\n+    }\r\n+}\r\n+\r\n+void display() {\r\n+    if(!graph) {\r\n+        cout << \"First create graph!\";\r\n+        return;\r\n+    }\r\n+\r\n+    for (int i = 0; i < N_COUNT; i++) {\r\n+        cout << graph -> adjList[i].src << \" -> \" << graph -> adjList[i].dests.front() -> dest;\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704995955501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,97 +1,63 @@\n-#include <iostream>\r\n-#include <queue>\r\n+// C++ program to print DFS traversal from\r\n+// a given vertex in a given graph\r\n+#include <bits/stdc++.h>\r\n using namespace std;\r\n-#define N_COUNT 4\r\n \r\n-struct node {\r\n-    int src;\r\n-    int dest;\r\n-};\r\n+// Graph class represents a directed graph\r\n+// using adjacency list representation\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n \r\n-struct AdjList {\r\n-    int src;\r\n-    queue<node*> dests;\r\n+\t// Function to add an edge to graph\r\n+\tvoid addEdge(int v, int w);\r\n+\r\n+\t// DFS traversal of the vertices\r\n+\t// reachable from v\r\n+\tvoid DFS(int v);\r\n };\r\n \r\n-struct Graph {\r\n-    struct AdjList *adjList;\r\n-}*graph;\r\n-\r\n-void createGraph() {\r\n-    graph = new (struct Graph);\r\n-    graph -> adjList = (struct AdjList*) malloc(N_COUNT * sizeof(struct AdjList));\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\t// Add w to v’s list.\r\n+\tadj[v].push_back(w);\r\n }\r\n \r\n-void drawEgde(int src, int dst) {\r\n-    if(!graph) {\r\n-        cout << \"First create graph!\";\r\n-        return;\r\n-    }\r\n+void Graph::DFS(int v)\r\n+{\r\n+\t// Mark the current node as visited and\r\n+\t// print it\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n \r\n-    for (int i = 0; i < N_COUNT; i++) {\r\n-        node *node = new (struct node);\r\n-        node -> dest = dst;\r\n-        graph -> adjList[i].src = src;\r\n-        graph -> adjList[i].dests.push(node);\r\n-    }\r\n+\t// Recur for all the vertices adjacent\r\n+\t// to this vertex\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+\t\t\tDFS(*i);\r\n }\r\n \r\n-void display() {\r\n-    if(!graph) {\r\n-        cout << \"First create graph!\";\r\n-        return;\r\n-    }\r\n+// Driver code\r\n+int main()\r\n+{\r\n+\t// Create a graph given in the above diagram\r\n+\tGraph g;\r\n+\tg.addEdge(0, 1);\r\n+\tg.addEdge(0, 2);\r\n+\tg.addEdge(1, 2);\r\n+\tg.addEdge(2, 0);\r\n+\tg.addEdge(2, 3);\r\n+\tg.addEdge(3, 3);\r\n \r\n-    for (int i = 0; i < N_COUNT; i++) {\r\n-        cout << graph -> adjList[i].src << \" -> \" << graph -> adjList[i].dests.front() -> dest;\r\n-    }\r\n-}\n-#include <iostream>\r\n-#include <queue>\r\n-using namespace std;\r\n-#define N_COUNT 4\r\n+\tcout << \"Following is Depth First Traversal\"\r\n+\t\t\t\" (starting from vertex 2) \\n\";\r\n \r\n\\ No newline at end of file\n-struct node {\r\n-    int src;\r\n-    int dest;\r\n-};\r\n+\t// Function call\r\n+\tg.DFS(2);\r\n \r\n-struct AdjList {\r\n-    int src;\r\n-    queue<node*> dests;\r\n-};\r\n-\r\n-struct Graph {\r\n-    struct AdjList *adjList;\r\n-}*graph;\r\n-\r\n-void createGraph() {\r\n-    graph = new (struct Graph);\r\n-    graph -> adjList = (struct AdjList*) malloc(N_COUNT * sizeof(struct AdjList));\r\n+\treturn 0;\r\n }\r\n \r\n-void drawEgde(int src, int dst) {\r\n-    if(!graph) {\r\n-        cout << \"First create graph!\";\r\n-        list<int>::it\r\n-        return;\r\n-    }\r\n-\r\n-    for (int i = 0; i < N_COUNT; i++) {\r\n-        node *node = new (struct node);\r\n-        node -> dest = dst;\r\n-        graph -> adjList[i].src = src;\r\n-        graph -> adjList[i].dests.push(node);\r\n-    }\r\n-}\r\n-\r\n-void display() {\r\n-    if(!graph) {\r\n-        cout << \"First create graph!\";\r\n-        return;\r\n-    }\r\n-\r\n-    for (int i = 0; i < N_COUNT; i++) {\r\n-        cout << graph -> adjList[i].src << \" -> \" << graph -> adjList[i].dests.front() -> dest;\r\n-    }\r\n-}\n+// improved by Vishnudev C\r\n"
                },
                {
                    "date": 1704995961361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n #include <bits/stdc++.h>\r\n using namespace std;\r\n \r\n-// Graph class represents a directed graph\r\n // using adjacency list representation\r\n class Graph {\r\n public:\r\n \tmap<int, bool> visited;\r\n"
                },
                {
                    "date": 1704995967240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\t// Mark the current node as visited and\r\n+\t// print it\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\t// Recur for all the vertices adjacent\r\n+\t// to this vertex\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+\t\t\tDFS(*i);\r\n+}\r\n+\r\n+// Driver code\r\n+int main()\r\n+{\r\n+\t// Create a graph given in the above diagram\r\n+\tGraph g;\r\n+\tg.addEdge(0, 1);\r\n+\tg.addEdge(0, 2);\r\n+\tg.addEdge(1, 2);\r\n+\tg.addEdge(2, 0);\r\n+\tg.addEdge(2, 3);\r\n+\tg.addEdge(3, 3);\r\n+\r\n+\tcout << \"Following is Depth First Traversal\"\r\n+\t\t\t\" (starting from vertex 2) \\n\";\r\n+\r\n+\t// Function call\r\n+\tg.DFS(2);\r\n+\r\n+\treturn 0;\r\n+}\r\n+\r\n+// improved by Vishnudev C\r\n"
                },
                {
                    "date": 1704995972446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+\t\t\tDFS(*i);\r\n+}\r\n+\r\n+int main()\r\n+{\r\n+\tGraph g;\r\n+\tg.addEdge(0, 1);\r\n+\tg.addEdge(0, 2);\r\n+\tg.addEdge(1, 2);\r\n+\tg.addEdge(2, 0);\r\n+\tg.addEdge(2, 3);\r\n+\tg.addEdge(3, 3);\r\n+\r\n+\tcout << \"Following is Depth First Traversal\"\r\n+\t\t\t\" (starting from vertex 2) \\n\";\r\n+\r\n+\t// Function call\r\n+\tg.DFS(2);\r\n+\r\n+\treturn 0;\r\n+}\r\n+\r\n+// improved by Vishnudev C\r\n"
                },
                {
                    "date": 1704996036668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,140 +25,21 @@\n \t\tif (!visited[*i])\r\n \t\t\tDFS(*i);\r\n }\r\n \r\n-int main()\r\n-{\r\n-\tGraph g;\r\n-\tg.addEdge(0, 1);\r\n-\tg.addEdge(0, 2);\r\n-\tg.addEdge(1, 2);\r\n-\tg.addEdge(2, 0);\r\n-\tg.addEdge(2, 3);\r\n-\tg.addEdge(3, 3);\r\n+// int main()\r\n+// {\r\n+// \tGraph g;\r\n+// \tg.addEdge(0, 1);\r\n+// \tg.addEdge(0, 2);\r\n+// \tg.addEdge(1, 2);\r\n+// \tg.addEdge(2, 0);\r\n+// \tg.addEdge(2, 3);\r\n+// \tg.addEdge(3, 3);\r\n \r\n-\tcout << \"Following is Depth First Traversal\"\r\n-\t\t\t\" (starting from vertex 2) \\n\";\r\n+// \tcout << \"Following is Depth First Traversal\"\r\n+// \t\t\t\" (starting from vertex 2) \\n\";\r\n \r\n-\t// Function call\r\n-\tg.DFS(2);\r\n+// \tg.DFS(2);\r\n \r\n-\treturn 0;\r\n-}\r\n-\r\n-// improved by Vishnudev C\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\t// Mark the current node as visited and\r\n-\t// print it\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\t// Recur for all the vertices adjacent\r\n-\t// to this vertex\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n-\t\t\tDFS(*i);\r\n-}\r\n-\r\n-// Driver code\r\n-int main()\r\n-{\r\n-\t// Create a graph given in the above diagram\r\n-\tGraph g;\r\n-\tg.addEdge(0, 1);\r\n-\tg.addEdge(0, 2);\r\n-\tg.addEdge(1, 2);\r\n-\tg.addEdge(2, 0);\r\n-\tg.addEdge(2, 3);\r\n-\tg.addEdge(3, 3);\r\n-\r\n-\tcout << \"Following is Depth First Traversal\"\r\n-\t\t\t\" (starting from vertex 2) \\n\";\r\n-\r\n-\t// Function call\r\n-\tg.DFS(2);\r\n-\r\n-\treturn 0;\r\n-}\r\n-\r\n-// improved by Vishnudev C\r\n-// C++ program to print DFS traversal from\r\n-// a given vertex in a given graph\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-// using adjacency list representation\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\t// Function to add an edge to graph\r\n-\tvoid addEdge(int v, int w);\r\n-\r\n-\t// DFS traversal of the vertices\r\n-\t// reachable from v\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\t// Add w to v’s list.\r\n-\tadj[v].push_back(w);\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\t// Mark the current node as visited and\r\n-\t// print it\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\t// Recur for all the vertices adjacent\r\n-\t// to this vertex\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n-\t\t\tDFS(*i);\r\n-}\r\n-\r\n-// Driver code\r\n-int main()\r\n-{\r\n-\t// Create a graph given in the above diagram\r\n-\tGraph g;\r\n-\tg.addEdge(0, 1);\r\n-\tg.addEdge(0, 2);\r\n-\tg.addEdge(1, 2);\r\n-\tg.addEdge(2, 0);\r\n-\tg.addEdge(2, 3);\r\n\\ No newline at end of file\n-\tg.addEdge(3, 3);\r\n-\r\n-\tcout << \"Following is Depth First Traversal\"\r\n-\t\t\t\" (starting from vertex 2) \\n\";\r\n-\r\n-\t// Function call\r\n-\tg.DFS(2);\r\n-\r\n-\treturn 0;\r\n-}\r\n-\r\n-// improved by Vishnudev C\n+// \treturn 0;\r\n+// }\r\n"
                },
                {
                    "date": 1704996587381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,22 +24,4 @@\n \tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n \t\tif (!visited[*i])\r\n \t\t\tDFS(*i);\r\n }\r\n-\r\n-// int main()\r\n-// {\r\n-// \tGraph g;\r\n-// \tg.addEdge(0, 1);\r\n-// \tg.addEdge(0, 2);\r\n-// \tg.addEdge(1, 2);\r\n-// \tg.addEdge(2, 0);\r\n-// \tg.addEdge(2, 3);\r\n-// \tg.addEdge(3, 3);\r\n-\r\n-// \tcout << \"Following is Depth First Traversal\"\r\n-// \t\t\t\" (starting from vertex 2) \\n\";\r\n-\r\n-// \tg.DFS(2);\r\n-\r\n-// \treturn 0;\r\n-// }\r\n"
                },
                {
                    "date": 1704997312462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,7 +21,7 @@\n \tcout << v << \" \";\r\n \r\n \tlist<int>::iterator i;\r\n \tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n+\t\tif (!visited[i])\r\n \t\t\tDFS(*i);\r\n }\r\n"
                },
                {
                    "date": 1704997323571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,6 +22,6 @@\n \r\n \tlist<int>::iterator i;\r\n \tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n \t\tif (!visited[i])\r\n-\t\t\tDFS(*i);\r\n+\t\t\tDFS(i);\r\n }\r\n"
                },
                {
                    "date": 1704997338971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,7 +21,7 @@\n \tcout << v << \" \";\r\n \r\n \tlist<int>::iterator i;\r\n \tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[i])\r\n+\t\tif (!visited[i]);\r\n \t\t\tDFS(i);\r\n }\r\n"
                },
                {
                    "date": 1704997353647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,6 +22,7 @@\n \r\n \tlist<int>::iterator i;\r\n \tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n \t\tif (!visited[i]);\r\n+            cout\r\n \t\t\tDFS(i);\r\n }\r\n"
                },
                {
                    "date": 1704997358963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,7 @@\n \tcout << v << \" \";\r\n \r\n \tlist<int>::iterator i;\r\n \tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[i]);\r\n-            cout\r\n+\t\tif (!visited[i]) {}\r\n \t\t\tDFS(i);\r\n }\r\n"
                },
                {
                    "date": 1704997365825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[i]) {\r\n+            DFS(i);\r\n+        }\r\n+\t\t\t\r\n+}\r\n"
                },
                {
                    "date": 1704997372889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[i]) {\r\n+            cout << \r\n+            DFS(i);\r\n+        }\r\n+}\r\n"
                },
                {
                    "date": 1704997378723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[i]) {\r\n+            cout << type(i);\r\n+            DFS(i);\r\n+        }\r\n+}\r\n"
                },
                {
                    "date": 1704997387263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i]) {\r\n+            cout << type(i);\r\n+            DFS(*i);\r\n+        }\r\n+}\r\n"
                },
                {
                    "date": 1704997402290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,122 +22,8 @@\n \r\n \tlist<int>::iterator i;\r\n \tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n \t\tif (!visited[*i]) {\r\n-            cout << type(i);\r\n+            cout << wcty(i);\r\n             DFS(*i);\r\n         }\r\n }\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[i]) {\r\n-            cout << type(i);\r\n-            DFS(i);\r\n-        }\r\n-}\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[i]) {\r\n-            cout << \r\n-            DFS(i);\r\n-        }\r\n-}\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[i]) {\r\n-            DFS(i);\r\n-        }\r\n-\t\t\t\r\n-}\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[i]) {}\r\n-\t\t\tDFS(i);\r\n-}\r\n"
                },
                {
                    "date": 1704997407486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+#include <bits/stdc++.h>\r\n+\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i]) {\r\n+            cout << type(i);\r\n+            DFS(*i);\r\n+        }\r\n+}\r\n"
                },
                {
                    "date": 1704997413881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+#include <bits/stdc++.h>\r\n+#include <iostream>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i]) {\r\n+            cout << type(i);\r\n+            DFS(*i);\r\n+        }\r\n+}\r\n"
                },
                {
                    "date": 1704997421783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n #include <bits/stdc++.h>\r\n-#include <iostream>\r\n using namespace std;\r\n \r\n class Graph {\r\n public:\r\n@@ -27,63 +26,4 @@\n             cout << type(i);\r\n             DFS(*i);\r\n         }\r\n }\r\n-#include <bits/stdc++.h>\r\n-\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i]) {\r\n-            cout << type(i);\r\n-            DFS(*i);\r\n-        }\r\n-}\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i]) {\r\n-            cout << wcty(i);\r\n-            DFS(*i);\r\n-        }\r\n-}\r\n"
                },
                {
                    "date": 1704997485195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,6 @@\n \r\n \tlist<int>::iterator i;\r\n \tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n \t\tif (!visited[*i]) {\r\n-            cout << type(i);\r\n             DFS(*i);\r\n-        }\r\n }\r\n"
                },
                {
                    "date": 1704997537213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,28 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+    int \r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+            DFS(*i);\r\n+}\r\n"
                },
                {
                    "date": 1704997543715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+    int c = 0;\r\n+    \r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+            DFS(*i);\r\n+}\r\n"
                },
                {
                    "date": 1704997549450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+    int c = 5;\r\n+    int b = \r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+            DFS(*i);\r\n+}\r\n"
                },
                {
                    "date": 1704997555198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+    int c = 5;\r\n+    int b = &c\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+            DFS(*i);\r\n+}\r\n"
                },
                {
                    "date": 1704997561575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+    int c = 5;\r\n+    int b = &c;\r\n+    cout << b;\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+            DFS(*i);\r\n+}\r\n"
                },
                {
                    "date": 1704997580195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n-    int b = &c;\r\n+    int *b = &c;\r\n     cout << b;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n@@ -27,146 +27,4 @@\n \tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n \t\tif (!visited[*i])\r\n             DFS(*i);\r\n }\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-    int c = 5;\r\n-    int b = &c\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n-            DFS(*i);\r\n-}\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-    int c = 5;\r\n-    int b = \r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n-            DFS(*i);\r\n-}\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-    int c = 0;\r\n-    \r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n-            DFS(*i);\r\n-}\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-    int \r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n-            DFS(*i);\r\n-}\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i]) {\r\n-            DFS(*i);\r\n-}\r\n"
                },
                {
                    "date": 1704997604440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n-    int *b = &c;\r\n+    int b = &c;\r\n     cout << b;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n"
                },
                {
                    "date": 1704997617847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,9 @@\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n-    int b = &c;\r\n-    cout << b;\r\n+    cout << &b;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n {\r\n"
                },
                {
                    "date": 1704997626379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n-    cout << &b;\r\n+    cout << b;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n {\r\n"
                },
                {
                    "date": 1704997640267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n-    cout << b;\r\n+    cout << &b;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n {\r\n"
                },
                {
                    "date": 1704997651604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n-    cout << &b;\r\n+    cout << *&c;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n {\r\n"
                },
                {
                    "date": 1704997670292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n-    cout << *&c;\r\n+    cout << &c;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n {\r\n"
                },
                {
                    "date": 1704997682184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n-    cout << &c;\r\n+    cout << *c;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n {\r\n"
                },
                {
                    "date": 1704997709634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \r\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n-    int c = 5;\r\n+    int& c = 5;\r\n     cout << *c;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n"
                },
                {
                    "date": 1704997715031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+    int& c = *5;\r\n+    cout << c;\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+            DFS(*i);\r\n+}\r\n"
                },
                {
                    "date": 1704997729551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \r\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n-    int& c = *5;\r\n+    int& c = 5;\r\n     cout << c;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n@@ -26,33 +26,4 @@\n \tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n \t\tif (!visited[*i])\r\n             DFS(*i);\r\n }\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-    int& c = 5;\r\n-    cout << *c;\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n-            DFS(*i);\r\n-}\r\n"
                },
                {
                    "date": 1704997742735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \r\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n-    int& c = 5;\r\n+    int& c = 5&;\r\n     cout << c;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n"
                },
                {
                    "date": 1704997753240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \r\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n-    int& c = 5&;\r\n+    int& c = 5;\r\n     cout << c;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n"
                },
                {
                    "date": 1704997765225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \r\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n-    int& c = 5;\r\n+    int c = &5;\r\n     cout << c;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n"
                },
                {
                    "date": 1704997777466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \r\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n-    int c = &5;\r\n+    int *c = 5;\r\n     cout << c;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n"
                },
                {
                    "date": 1704997802770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \r\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n-    int *c = 5;\r\n+    int *c = *5;\r\n     cout << c;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n"
                },
                {
                    "date": 1704998048233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \r\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n-    int *c = *5;\r\n+    int c = *5;\r\n     cout << c;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n"
                },
                {
                    "date": 1704998056540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+    int c = 5;\r\n+    int *b = \r\n+    cout << c;\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+            DFS(*i);\r\n+}\r\n"
                },
                {
                    "date": 1704998063278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+    int c = 5;\r\n+    int *b = &c;\r\n+    cout << b;\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+            DFS(*i);\r\n+}\r\n"
                },
                {
                    "date": 1704998084111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n {\r\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n     int *b = &c;\r\n-    cout << b;\r\n+    cout << *b;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n {\r\n@@ -27,63 +27,4 @@\n \tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n \t\tif (!visited[*i])\r\n             DFS(*i);\r\n }\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-    int c = 5;\r\n-    int *b = \r\n-    cout << c;\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n-            DFS(*i);\r\n-}\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-    int c = *5;\r\n-    cout << c;\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n-            DFS(*i);\r\n-}\r\n"
                },
                {
                    "date": 1704998107851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n-    int *b = &c;\r\n+    int *b = &;\r\n     cout << *b;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n"
                },
                {
                    "date": 1704998114168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+    int c = 5;\r\n+    int *b = &c;\r\n+    cout << *b;\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+            DFS(*i);\r\n+}\r\n"
                },
                {
                    "date": 1704998153197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+    int c = 5;\r\n+    int &b = &c;\r\n+    cout << *b;\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+            DFS(*i);\r\n+}\r\n"
                },
                {
                    "date": 1704998158357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+    int c = 5;\r\n+    int &b;\r\n+    \r\n+    cout << *b;\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+            DFS(*i);\r\n+}\r\n"
                },
                {
                    "date": 1704998163769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+    int c = 5;\r\n+    int &b;\r\n+    b = *\r\n+    cout << *b;\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+            DFS(*i);\r\n+}\r\n"
                },
                {
                    "date": 1704998181554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+    int c = 5;\r\n+    int &b;\r\n+    b = c;\r\n+    cout << *b;\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+            DFS(*i);\r\n+}\r\n"
                },
                {
                    "date": 1704998197201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n {\r\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n     int &b;\r\n-    b = c;\r\n     cout << *b;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n@@ -28,156 +27,4 @@\n \tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n \t\tif (!visited[*i])\r\n             DFS(*i);\r\n }\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-    int c = 5;\r\n-    int &b;\r\n-    b = *\r\n-    cout << *b;\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n-            DFS(*i);\r\n-}\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-    int c = 5;\r\n-    int &b;\r\n-    \r\n-    cout << *b;\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n-            DFS(*i);\r\n-}\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-    int c = 5;\r\n-    int &b = &c;\r\n-    cout << *b;\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n-            DFS(*i);\r\n-}\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-    int c = 5;\r\n-    int *b = &c;\r\n-    cout << *b;\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n-            DFS(*i);\r\n-}\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-    int c = 5;\r\n-    int *b = &;\r\n-    cout << *b;\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n-            DFS(*i);\r\n-}\r\n"
                },
                {
                    "date": 1704998205466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n-    int &b;\r\n+    int &b = &c;\r\n     cout << *b;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n"
                },
                {
                    "date": 1704998240873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n-    int &b = &c;\r\n+    int &b = c;\r\n     cout << *b;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n"
                },
                {
                    "date": 1704998250906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n {\r\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n     int &b = c;\r\n-    cout << *b;\r\n+    cout << b;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n {\r\n"
                },
                {
                    "date": 1704998280853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n {\r\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n     int &b = c;\r\n+    b = 10;\r\n     cout << b;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n"
                },
                {
                    "date": 1704998409135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n+    int d = 2;\r\n     int &b = c;\r\n     b = 10;\r\n     cout << b;\r\n }\r\n"
                },
                {
                    "date": 1704998502542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \tadj[v].push_back(w);\r\n     int c = 5;\r\n     int d = 2;\r\n     int &b = c;\r\n-    b = 10;\r\n+    b = d;\r\n     cout << b;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n"
                },
                {
                    "date": 1704998588625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     int c = 5;\r\n     int d = 2;\r\n     int &b = c;\r\n     b = d;\r\n-    cout << b;\r\n+    cout << b ;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n {\r\n"
                },
                {
                    "date": 1704998594792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+    int c = 5;\r\n+    int d = 2;\r\n+    int &b = c;\r\n+    b = d;\r\n+    cout << b \"->\" << ;\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+            DFS(*i);\r\n+}\r\n"
                },
                {
                    "date": 1704998603132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+#include <bits/stdc++.h>\r\n+using namespace std;\r\n+\r\n+class Graph {\r\n+public:\r\n+\tmap<int, bool> visited;\r\n+\tmap<int, list<int> > adj;\r\n+\r\n+\tvoid addEdge(int v, int w);\r\n+\tvoid DFS(int v);\r\n+};\r\n+\r\n+void Graph::addEdge(int v, int w)\r\n+{\r\n+\tadj[v].push_back(w);\r\n+    int c = 5;\r\n+    int d = 2;\r\n+    int &b = c;\r\n+    b = d;\r\n+    cout << b \"->\" << &d;\r\n+}\r\n+\r\n+void Graph::DFS(int v)\r\n+{\r\n+\tvisited[v] = true;\r\n+\tcout << v << \" \";\r\n+\r\n+\tlist<int>::iterator i;\r\n+\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n+\t\tif (!visited[*i])\r\n+            DFS(*i);\r\n+}\r\n"
                },
                {
                    "date": 1704998613976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     int c = 5;\r\n     int d = 2;\r\n     int &b = c;\r\n     b = d;\r\n-    cout << b \"->\" << &d;\r\n+    cout << b << \"->\" << &d;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n {\r\n@@ -29,68 +29,4 @@\n \tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n \t\tif (!visited[*i])\r\n             DFS(*i);\r\n }\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-    int c = 5;\r\n-    int d = 2;\r\n-    int &b = c;\r\n-    b = d;\r\n-    cout << b \"->\" << ;\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n-            DFS(*i);\r\n-}\r\n-#include <bits/stdc++.h>\r\n-using namespace std;\r\n-\r\n-class Graph {\r\n-public:\r\n-\tmap<int, bool> visited;\r\n-\tmap<int, list<int> > adj;\r\n-\r\n-\tvoid addEdge(int v, int w);\r\n-\tvoid DFS(int v);\r\n-};\r\n-\r\n-void Graph::addEdge(int v, int w)\r\n-{\r\n-\tadj[v].push_back(w);\r\n-    int c = 5;\r\n-    int d = 2;\r\n-    int &b = c;\r\n-    b = d;\r\n-    cout << b ;\r\n-}\r\n-\r\n-void Graph::DFS(int v)\r\n-{\r\n-\tvisited[v] = true;\r\n-\tcout << v << \" \";\r\n-\r\n-\tlist<int>::iterator i;\r\n-\tfor (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n-\t\tif (!visited[*i])\r\n-            DFS(*i);\r\n-}\r\n"
                },
                {
                    "date": 1704998753811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     int c = 5;\r\n     int d = 2;\r\n     int &b = c;\r\n     b = d;\r\n-    cout << b << \"->\" << &d;\r\n+    cout << *b << \"->\" << &d;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n {\r\n"
                },
                {
                    "date": 1704998759644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     int c = 5;\r\n     int d = 2;\r\n     int &b = c;\r\n     b = d;\r\n-    cout << *b << \"->\" << &d;\r\n+    cout << *b;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n {\r\n"
                },
                {
                    "date": 1704998774477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     int c = 5;\r\n     int d = 2;\r\n     int &b = c;\r\n     b = d;\r\n-    cout << *b;\r\n+    cout << b;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n {\r\n"
                },
                {
                    "date": 1704999085298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,13 +12,8 @@\n \r\n void Graph::addEdge(int v, int w)\r\n {\r\n \tadj[v].push_back(w);\r\n-    int c = 5;\r\n-    int d = 2;\r\n-    int &b = c;\r\n-    b = d;\r\n-    cout << b;\r\n }\r\n \r\n void Graph::DFS(int v)\r\n {\r\n"
                }
            ],
            "date": 1704905345436,
            "name": "Commit-0",
            "content": "#include <iostream>\r\n#include <queue>\r\nusing namespace std;\r\n#define N_COUNT 4\r\n\r\nstruct node {\r\n    int src;\r\n    int dest;\r\n};\r\n\r\nstruct AdjList {\r\n    int src;\r\n    queue<node*> dests;\r\n};\r\n\r\nstruct Graph {\r\n    struct AdjList *adjList;\r\n}*graph;\r\n\r\nstruct Edge {\r\n\tint src;\r\n\tint dest;\r\n};\r\n\r\nvoid createGraph() {\r\n    graph = new (struct Graph);\r\n    graph -> adjList = (struct AdjList*) malloc(N_COUNT * sizeof(struct AdjList));\r\n    \r\n    for (int i = 0; i < N_COUNT; i) {\r\n        graph -> adjList[i] = NULL;\r\n    }\r\n}\r\n\r\nvoid drawEgde(int src, int dst) {\r\n    if(!graph) {\r\n        cout << \"First create graph!\";\r\n        return;\r\n    }\r\n\r\n    for (int i = 0; i < N_COUNT; i++) {\r\n        node *node = new (struct node);\r\n        node -> dest = dst;\r\n        graph -> adjList[i] -> src = src;\r\n        graph -> adjList[i] -> dests.push(node);\r\n    }\r\n}\r\n\r\nvoid display() {\r\n    if(!graph) {\r\n        cout << \"First create graph!\";\r\n        return;\r\n    }\r\n\r\n    for (int i = 0; i < N_COUNT; i++) {\r\n        cout << graph -> adjList[i] -> src << \" -> \" << graph -> adjList[i] -> dests.front() -> dest;\r\n    }\r\n}"
        }
    ]
}